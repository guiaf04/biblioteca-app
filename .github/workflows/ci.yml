name: CI - Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  checks: write
  actions: write
  security-events: write

env:
  JAVA_VERSION: '17'
  NODE_VERSION: '18'

jobs:
  # Job para testes do backend
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run backend tests
      working-directory: ./backend
      run: |
        mvn clean test
        
    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Backend Test Results
        path: backend/target/surefire-reports/*.xml
        reporter: java-junit
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-test-results
        path: backend/target/surefire-reports/

  # Job para build do backend
  backend-build:
    name: Backend Build
    runs-on: ubuntu-latest
    needs: backend-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build backend
      working-directory: ./backend
      run: |
        mvn clean package -DskipTests
        
    - name: Upload backend artifact
      uses: actions/upload-artifact@v4
      with:
        name: backend-jar
        path: backend/target/*.jar

  # Job para testes do frontend
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install dependencies
      run: |
        npm install -g http-server
        
    - name: Validate HTML
      run: |
        # Verificar se arquivos HTML s√£o v√°lidos
        if [ -f "frontend/index.html" ]; then
          echo "‚úÖ index.html encontrado"
        else
          echo "‚ùå index.html n√£o encontrado"
          exit 1
        fi
        
    - name: Validate CSS
      run: |
        # Verificar se arquivos CSS s√£o v√°lidos
        if [ -f "frontend/styles.css" ]; then
          echo "‚úÖ styles.css encontrado"
        else
          echo "‚ùå styles.css n√£o encontrado"
          exit 1
        fi
        
    - name: Validate JavaScript
      run: |
        # Verificar sintaxe JavaScript b√°sica
        node -c frontend/script.js
        echo "‚úÖ JavaScript syntax is valid"
        
    - name: Run frontend tests
      run: |
        # Simular execu√ß√£o de testes frontend
        echo "üß™ Running frontend tests..."
        cd frontend
        http-server . -p 3000 &
        SERVER_PID=$!
        sleep 3
        
        # Testar se servidor est√° respondendo
        if curl -f http://localhost:3000/ > /dev/null 2>&1; then
          echo "‚úÖ Frontend server is responding"
        else
          echo "‚ùå Frontend server is not responding"
          kill $SERVER_PID
          exit 1
        fi
        
        kill $SERVER_PID
        echo "‚úÖ Frontend tests passed"

  # Job para build das imagens Docker
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [backend-build, frontend-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Download backend artifact
      uses: actions/download-artifact@v3
      with:
        name: backend-jar
        path: backend/target/
        
    - name: Build backend Docker image
      run: |
        cd backend
        docker build -t biblioteca-backend:${{ github.sha }} .
        docker tag biblioteca-backend:${{ github.sha }} biblioteca-backend:latest
        
    - name: Build frontend Docker image
      run: |
        cd frontend
        docker build -t biblioteca-frontend:${{ github.sha }} .
        docker tag biblioteca-frontend:${{ github.sha }} biblioteca-frontend:latest
        
    - name: Test Docker images
      run: |
        # Testar se as imagens foram criadas corretamente
        docker images | grep biblioteca
        
        # Testar se containers podem ser iniciados
        docker run -d --name test-backend -p 8081:8080 biblioteca-backend:latest
        docker run -d --name test-frontend -p 8082:80 biblioteca-frontend:latest
        
        sleep 10
        
        # Verificar se containers est√£o rodando
        docker ps
        
        # Cleanup
        docker stop test-backend test-frontend
        docker rm test-backend test-frontend

  # Job para an√°lise de seguran√ßa
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [backend-build, frontend-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Job de notifica√ß√£o
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [backend-tests, backend-build, frontend-tests, docker-build, security-scan]
    if: always()
    
    steps:
    - name: Notify success
      if: ${{ needs.backend-tests.result == 'success' && needs.backend-build.result == 'success' && needs.frontend-tests.result == 'success' && needs.docker-build.result == 'success' }}
      run: |
        echo "üéâ All CI jobs completed successfully!"
        echo "‚úÖ Backend tests passed"
        echo "‚úÖ Backend build successful"
        echo "‚úÖ Frontend tests passed"
        echo "‚úÖ Docker images built successfully"
        
    - name: Notify failure
      if: ${{ needs.backend-tests.result == 'failure' || needs.backend-build.result == 'failure' || needs.frontend-tests.result == 'failure' || needs.docker-build.result == 'failure' }}
      run: |
        echo "‚ùå Some CI jobs failed!"
        echo "Backend tests: ${{ needs.backend-tests.result }}"
        echo "Backend build: ${{ needs.backend-build.result }}"
        echo "Frontend tests: ${{ needs.frontend-tests.result }}"
        echo "Docker build: ${{ needs.docker-build.result }}"
        exit 1
