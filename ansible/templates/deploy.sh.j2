#!/bin/bash

# Script de deploy da aplicação Biblioteca na instância EC2

set -e

# Variáveis de ambiente passadas pelo Ansible
AWS_REGION="{{ aws_region }}"
BACKEND_IMAGE="{{ backend_image }}"
FRONTEND_IMAGE="{{ frontend_image }}"
APP_DIRECTORY="{{ app_directory }}"
APP_USER="{{ app_user }}"

log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

# Login no ECR
log "🔐 Fazendo login no ECR..."
aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $(echo $BACKEND_IMAGE | cut -d'/' -f1)

# Pull das imagens mais recentes
log "📥 Baixando imagens mais recentes..."
docker pull $BACKEND_IMAGE || log "⚠️ Falha ao baixar imagem do backend"
docker pull $FRONTEND_IMAGE || log "⚠️ Falha ao baixar imagem do frontend"

# Parar containers existentes
log "🛑 Parando containers existentes..."
docker-compose -f $APP_DIRECTORY/docker-compose.yml down || true

# Remover imagens antigas (manter apenas as 3 mais recentes)
log "🧹 Limpando imagens antigas..."
docker images --format "table {{.Repository}}:{{.Tag}}\t{{.CreatedAt}}" | grep biblioteca | tail -n +4 | awk 

# Iniciar aplicação
log "🚀 Iniciando aplicação..."
docker-compose -f $APP_DIRECTORY/docker-compose.yml up -d

# Aguardar containers ficarem saudáveis
log "⏳ Aguardando containers ficarem saudáveis..."
sleep 30

# Verificar status
log "📊 Verificando status dos containers..."
docker-compose -f $APP_DIRECTORY/docker-compose.yml ps

# Testar conectividade
log "🧪 Testando conectividade..."
sleep 10

if curl -s http://localhost:8080/api/livros/estatisticas > /dev/null; then
    log "✅ Backend está respondendo!"
else
    log "⚠️ Backend pode não estar pronto ainda"
fi

if curl -s http://localhost > /dev/null; then
    log "✅ Frontend está respondendo!"
else
    log "⚠️ Frontend pode não estar pronto ainda"
fi

log "🎉 Deploy concluído!"

