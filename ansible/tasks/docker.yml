---
# Tarefas para instalação e configuração do Docker

- name: Remove old Docker packages
  apt:
    name:
      - docker
      - docker-engine
      - docker.io
      - containerd
      - runc
    state: absent
  ignore_errors: yes

- name: Install Docker dependencies
  apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg
      - lsb-release
    state: present

- name: Ensure keyrings directory exists
  file:
    path: /usr/share/keyrings
    state: directory
    mode: '0755'

- name: Download and de-armor Docker GPG key
  ansible.builtin.shell:
    cmd: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
  args:
    creates: /usr/share/keyrings/docker-archive-keyring.gpg
  changed_when: false

- name: Ensure GPG key has correct permissions
  file:
    path: /usr/share/keyrings/docker-archive-keyring.gpg
    mode: '0644'

- name: Add Docker repository
  ansible.builtin.shell:
    cmd: echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
  args:
    creates: /etc/apt/sources.list.d/docker.list

- name: Update apt cache after adding Docker repo
  apt:
    update_cache: yes

- name: Install Docker CE
  apt:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-compose-plugin
    state: present
  notify: restart docker

- name: Start and enable Docker service
  systemd:
    name: docker
    state: started
    enabled: yes

- name: Add user to docker group
  user:
    name: "{{ app_user }}"
    groups: docker
    append: yes

- name: Reset SSH connection to apply group changes
  meta: reset_connection
  become: no

- name: Verify Docker installation
  command: docker --version
  register: docker_version
  changed_when: false

- name: Verify Docker Compose plugin installation
  command: docker compose version
  register: docker_compose_version
  changed_when: false

- name: Display Docker versions
  debug:
    msg:
      - "Docker version: {{ docker_version.stdout }}"
      - "Docker Compose version: {{ docker_compose_version.stdout }}"

- name: Configure Docker daemon
  copy:
    content: |
      {
        "log-driver": "json-file",
        "log-opts": {
          "max-size": "10m",
          "max-file": "3"
        },
        "storage-driver": "overlay2",
        "live-restore": true
      }
    dest: /etc/docker/daemon.json
    mode: '0644'
  notify: restart docker

- name: Create Docker systemd override directory
  file:
    path: /etc/systemd/system/docker.service.d
    state: directory
    mode: '0755'

- name: Configure Docker systemd service
  copy:
    content: |
      [Service]
      ExecStart=
      ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock
      ExecReload=/bin/kill -s HUP $MAINPID
      TimeoutSec=0
      RestartSec=2
      Restart=always
      StartLimitBurst=3
      StartLimitInterval=60s
      LimitNOFILE=infinity
      LimitNPROC=infinity
      LimitCORE=infinity
      TasksMax=infinity
      Delegate=yes
      KillMode=process
      OOMScoreAdjust=-500
    dest: /etc/systemd/system/docker.service.d/override.conf
    mode: '0644'
  notify: restart docker

- name: Reload systemd daemon
  systemd:
    daemon_reload: yes

- name: Test Docker functionality
  command: docker run --rm hello-world
  register: docker_test
  changed_when: false
  become_user: "{{ app_user }}"

- name: Display Docker test result
  debug:
    msg: "Docker test successful"
  when: "'Hello from Docker!' in docker_test.stdout"
